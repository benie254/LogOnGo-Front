import { ComponentHarness } from '@angular/cdk/testing';
import { BaseHarnessFilters, HarnessPredicate } from '@angular/cdk/testing';
interface MenuItemHarnessFilters extends BaseHarnessFilters {
    label?: string | RegExp;
}
declare class MenuItemHarness extends ComponentHarness {
    static hostSelector: string;
    getLabelElement: import("@angular/cdk/testing").AsyncFactoryFn<import("@angular/cdk/testing").TestElement>;
    getLinkElement: import("@angular/cdk/testing").AsyncFactoryFn<import("@angular/cdk/testing").TestElement>;
    getBadgesElement: import("@angular/cdk/testing").AsyncFactoryFn<import("@angular/cdk/testing").TestElement[]>;
    static with(options: MenuItemHarnessFilters): HarnessPredicate<MenuItemHarness>;
    getItemLabel(): Promise<string>;
    isFiltered(): Promise<boolean>;
}
export declare class MenuHarness extends ComponentHarness {
    static hostSelector: string;
    getItems: import("@angular/cdk/testing").AsyncFactoryFn<MenuItemHarness[]>;
    getItemsHeaders: import("@angular/cdk/testing").AsyncFactoryFn<import("@angular/cdk/testing").TestElement[]>;
    getItemsWithIcons: import("@angular/cdk/testing").AsyncFactoryFn<import("@angular/cdk/testing").TestElement[]>;
    getItemsWithBadges: import("@angular/cdk/testing").AsyncFactoryFn<import("@angular/cdk/testing").TestElement[]>;
    getActivatedAnchors: import("@angular/cdk/testing").AsyncFactoryFn<import("@angular/cdk/testing").TestElement[]>;
    getActivatedAnchorsLabels: import("@angular/cdk/testing").AsyncFactoryFn<import("@angular/cdk/testing").TestElement[]>;
    getOpenedNodes: import("@angular/cdk/testing").AsyncFactoryFn<import("@angular/cdk/testing").TestElement[]>;
    getOpenedNodesLabels: import("@angular/cdk/testing").AsyncFactoryFn<import("@angular/cdk/testing").TestElement[]>;
    getDisabledItems: import("@angular/cdk/testing").AsyncFactoryFn<import("@angular/cdk/testing").TestElement[]>;
    getFilteredItems: import("@angular/cdk/testing").AsyncFactoryFn<import("@angular/cdk/testing").TestElement[]>;
    getItemsWith(filters?: MenuItemHarnessFilters): Promise<MenuItemHarness[]>;
    getItemWith(filters?: MenuItemHarnessFilters): Promise<MenuItemHarness>;
    clickItemWith(filters?: MenuItemHarnessFilters): Promise<void>;
}
export {};
