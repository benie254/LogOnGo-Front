{"version":3,"sources":["../../../library/src/lib/sidebar-menu.interface.ts","../../../library/src/lib/internal/anchor.service.ts","../../../library/src/lib/internal/node.service.ts","../../../library/src/lib/internal/role.service.ts","../../../library/src/lib/internal/search.service.ts","../../../library/src/lib/internal/utils.ts","../../../library/src/lib/sidebar-menu.component.ts","../../../library/src/lib/internal/node.animations.ts","../../../library/src/lib/internal/item.component.ts","../../../library/src/lib/internal/node.component.ts","../../../library/src/lib/internal/anchor.component.ts","../../../library/src/lib/sidebar-menu.module.ts"],"names":["Modes","Injectable","this","openedNode","Subject","RoleService","role$","BehaviorSubject","undefined","unAuthorizedVisibility$","Object","defineProperty","prototype","role","next","visibility","showItem$","roles","itemVisibilityBase$","pipe","map","values","isAuthorized","unAuthorizedVisibility","disableItem$","_this","combineLatest","value","isRole","userRole","itemRoles","length","includes","SearchService","_search","search$","asObservable","filter","search","label","toLowerCase","trackByItem","index","item","id","SidebarMenuComponent","anchorService","nodeService","searchService","roleService","mode","EXPANDED","modes","disableAnimations","menu","setTimeout","cssClasses","iconClasses","toggleIconClasses","Component","args","selector","providers","NodeService","AnchorService","changeDetection","ChangeDetectionStrategy","OnPush","template","Input","openCloseAnimation","trigger","state","style","height","AUTO_STYLE","transition","animate","TRANSITION_DURATION","rotateAnimation","transform","ItemComponent","router","changeDetectorRef","isRootNode","disable","onDestroy$","isActive","isFiltered","isActive$","distinctUntilChanged","takeUntil","isFiltered$","isItemFiltered","isItemDisabled","ngOnInit","routerItemActiveSubscription","emitItemActive","menuSearchSubscription","disabledItemSubscription","ngOnDestroy","complete","onNodeActive","event","onNodeFiltered","events","e","NavigationEnd","subscribe","menuItem","children","header","markForCheck","disabled","route","isActiveRoute","isItemLinkExact","linkActiveExact","animations","Router","ChangeDetectorRef","HostBinding","NodeComponent","EventEmitter","isOpen","isActiveChild","ngAfterViewInit","openedNodeSubscription","activeItemsSubscription","filterItemsSubscription","onNodeToggleClick","nodeComponent","nodeLevel","level","isChildrenItemsActive","menuItemComponents","itemsActiveState","emit","isChildrenItemsFiltered","itemsFilteredState","isItemsFiltered","node","Output","ViewChildren","AnchorComponent","clickAnchor","_a","routerLinActive","ViewChild","NgModule","declarations","imports","RouterModule","CommonModule","exports"],"mappings":"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","sourcesContent":["import { Role } from './internal/role.service';\n\nexport type UnAuthorizedVisibility = 'hidden' | 'disabled';\n\nexport enum Modes {\n  EXPANDED = 'expanded',\n  EXPANDABLE = 'expandable',\n  MINI = 'mini',\n}\n\ntype MenuItemID = number | string;\n\nexport interface MenuItemBadge {\n  label: string;\n  classes: string;\n}\n\nexport interface MenuItemBase {\n  id?: MenuItemID;\n  label: string;\n  iconClasses?: string;\n  badges?: MenuItemBadge[];\n  roles?: Role[];\n}\n\nexport interface MenuItemLeafRoute extends MenuItemBase {\n  route: string;\n  linkActiveExact?: boolean;\n}\n\nexport interface MenuItemLeafURL extends MenuItemBase {\n  url: string;\n  target?: string;\n}\n\nexport interface MenuItemHeader {\n  id?: MenuItemID;\n  header: string;\n}\n\nexport interface MenuItemNode extends MenuItemBase {\n  children: MenuItem[];\n}\n\ntype Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };\ntype XOR<T, U> = T | U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;\n\nexport type MenuItem = XOR<MenuItemLeafRoute, XOR<MenuItemLeafURL, XOR<MenuItemHeader, MenuItemNode>>>;\n\nexport type Menu = MenuItem[];\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class AnchorService {\n  public iconClasses?: string;\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { NodeComponent } from './node.component';\n\n@Injectable()\nexport class NodeService {\n  public openedNode = new Subject<{ nodeComponent: NodeComponent; nodeLevel: number }>();\n  public toggleIconClasses?: string;\n}\n","import { Injectable } from '@angular/core';\n\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { UnAuthorizedVisibility } from '../sidebar-menu.interface';\n\nexport type Role = string | number;\n\n@Injectable()\nexport class RoleService {\n  private role$ = new BehaviorSubject<Role | undefined>(undefined);\n  private unAuthorizedVisibility$ = new BehaviorSubject<UnAuthorizedVisibility>('hidden');\n\n  set role(role: Role | undefined) {\n    this.role$.next(role);\n  }\n\n  set unAuthorizedVisibility(visibility: UnAuthorizedVisibility) {\n    this.unAuthorizedVisibility$.next(visibility);\n  }\n\n  showItem$(roles?: Role[]): Observable<boolean> {\n    return this.itemVisibilityBase$(roles).pipe(\n      map((values) => values.isAuthorized || (!values.isAuthorized && values.unAuthorizedVisibility !== 'hidden'))\n    );\n  }\n\n  disableItem$(roles?: Role[]): Observable<boolean> {\n    return this.itemVisibilityBase$(roles).pipe(\n      map((values) => !values.isAuthorized && values.unAuthorizedVisibility === 'disabled')\n    );\n  }\n\n  private itemVisibilityBase$(\n    roles?: Role[]\n  ): Observable<{ isAuthorized: boolean; unAuthorizedVisibility: UnAuthorizedVisibility }> {\n    return combineLatest([\n      this.role$.pipe(map((role) => this.isAuthorized(role, roles))),\n      this.unAuthorizedVisibility$,\n    ]).pipe(map((value) => ({ isAuthorized: value[0], unAuthorizedVisibility: value[1] })));\n  }\n\n  private isRole(role?: Role): boolean {\n    return typeof role === 'string' || typeof role === 'number';\n  }\n\n  private isAuthorized(userRole?: Role, itemRoles?: Role[]): boolean {\n    if (!this.isRole(userRole) || !itemRoles || itemRoles.length === 0) {\n      return true;\n    }\n\n    return (itemRoles as Role[]).includes(userRole as Role);\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class SearchService {\n  private _search = new Subject<string>();\n  public search$ = this._search.asObservable();\n\n  set search(value: string | undefined) {\n    this._search.next(value);\n  }\n\n  public filter(search?: string, label?: string): boolean {\n    if (!search || !label) {\n      return false;\n    }\n\n    return !label.toLowerCase().includes(search.toLowerCase());\n  }\n}\n","import { TrackByFunction } from '@angular/core';\n\nimport { MenuItem } from '../sidebar-menu.interface';\n\nexport const trackByItem: TrackByFunction<MenuItem> = (index, item) => {\n  return item.id || index;\n};\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { Menu, Modes, UnAuthorizedVisibility } from './sidebar-menu.interface';\n\nimport { AnchorService } from './internal/anchor.service';\nimport { NodeService } from './internal/node.service';\nimport { RoleService, Role } from './internal/role.service';\nimport { SearchService } from './internal/search.service';\nimport { trackByItem } from './internal/utils';\n\n@Component({\n  selector: 'asm-angular-sidebar-menu',\n  styleUrls: ['sidebar-menu.component.scss'],\n  providers: [NodeService, AnchorService, RoleService, SearchService],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: ` <div class=\"asm-menu\" [ngClass]=\"'asm-menu--mode-' + mode\" [@.disabled]=\"disableAnimations\">\n    <ng-content></ng-content>\n    <ul class=\"asm-menu__node\">\n      <ng-container *ngFor=\"let item of menu; trackBy: trackByItem\">\n        <li\n          asm-menu-item\n          class=\"asm-menu-item asm-menu-item--root\"\n          *ngIf=\"roleService.showItem$(item.roles) | async\"\n          [menuItem]=\"item\"\n          [level]=\"0\"\n        ></li>\n      </ng-container>\n    </ul>\n  </div>`,\n})\nexport class SidebarMenuComponent {\n  @Input('menu') set _menu(menu: Menu) {\n    this.disableAnimations = true;\n    this.menu = menu;\n\n    setTimeout(() => {\n      this.disableAnimations = false;\n    });\n  }\n  @Input() set iconClasses(cssClasses: string) {\n    this.anchorService.iconClasses = cssClasses;\n  }\n  @Input() set toggleIconClasses(cssClasses: string) {\n    this.nodeService.toggleIconClasses = cssClasses;\n  }\n  @Input() set role(role: Role | undefined) {\n    this.roleService.role = role;\n  }\n  @Input() set unAuthorizedVisibility(visibility: UnAuthorizedVisibility) {\n    this.roleService.unAuthorizedVisibility = visibility;\n  }\n  @Input() set search(value: string | undefined) {\n    this.searchService.search = value;\n  }\n  @Input() mode = Modes.EXPANDED;\n\n  menu?: Menu;\n  modes = Modes;\n  disableAnimations = true;\n  trackByItem = trackByItem;\n\n  constructor(\n    private anchorService: AnchorService,\n    private nodeService: NodeService,\n    private searchService: SearchService,\n    public roleService: RoleService\n  ) {}\n}\n","import { animate, AUTO_STYLE, state, style, transition, trigger } from '@angular/animations';\n\nconst TRANSITION_DURATION = 300;\n\nexport const openCloseAnimation = trigger('openClose', [\n  state('true', style({ height: AUTO_STYLE })),\n  state('false', style({ height: 0 })),\n  transition('false <=> true', animate(`${TRANSITION_DURATION}ms ease-in`)),\n]);\n\nexport const rotateAnimation = trigger('rotate', [\n  state('true', style({ transform: 'rotate(-90deg)' })),\n  transition('false <=> true', animate(`${TRANSITION_DURATION}ms ease-out`)),\n]);\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  ChangeDetectorRef,\n  HostBinding,\n} from '@angular/core';\nimport { Event as RouterEvent, NavigationEnd, Router } from '@angular/router';\n\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, takeUntil } from 'rxjs/operators';\n\nimport { MenuItem } from '../sidebar-menu.interface';\n\nimport { RoleService } from './role.service';\nimport { SearchService } from './search.service';\nimport { rotateAnimation } from './node.animations';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'li[asm-menu-item][menuItem]',\n  animations: [rotateAnimation],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <ng-container [ngSwitch]=\"true\">\n      <span *ngSwitchCase=\"!!menuItem.header\" class=\"asm-menu-item__header\">{{ menuItem.header }}</span>\n      <asm-menu-anchor\n        *ngSwitchCase=\"!menuItem.children && !menuItem.header\"\n        class=\"asm-menu-anchor\"\n        [menuItem]=\"menuItem\"\n        [disable]=\"disable || isItemDisabled\"\n      ></asm-menu-anchor>\n      <ng-container *ngSwitchCase=\"!!menuItem.children\">\n        <asm-menu-anchor\n          class=\"asm-menu-anchor\"\n          [ngClass]=\"{ 'asm-menu-anchor--open': node.isOpen }\"\n          [menuItem]=\"menuItem\"\n          (clickAnchor)=\"node.onNodeToggleClick()\"\n          [isActive]=\"node.isActiveChild\"\n          ><i toggleIcon [@rotate]=\"node.isOpen\" [class]=\"node.nodeService.toggleIconClasses\"></i\n        ></asm-menu-anchor>\n        <asm-menu-node\n          #node\n          class=\"asm-menu-node\"\n          [menuItem]=\"menuItem\"\n          [level]=\"level\"\n          [disable]=\"disable || isItemDisabled\"\n          (isActive)=\"onNodeActive($event)\"\n          (isFiltered)=\"onNodeFiltered($event)\"\n        ></asm-menu-node>\n      </ng-container>\n    </ng-container>\n  `,\n})\nexport class ItemComponent implements OnInit, OnDestroy {\n  @Input() menuItem!: MenuItem;\n  @Input() isRootNode = true;\n  @Input() level!: number;\n  @Input() disable = false;\n\n  @HostBinding('class.asm-menu-item--filtered') get filtered(): boolean {\n    return this.isItemFiltered;\n  }\n  @HostBinding('class.asm-menu-item--disabled') get disabled(): boolean {\n    return this.isItemDisabled || this.disable;\n  }\n\n  private onDestroy$ = new Subject();\n  private isActive = new BehaviorSubject(false);\n  private isFiltered = new BehaviorSubject(false);\n\n  isActive$ = this.isActive.asObservable().pipe(distinctUntilChanged(), takeUntil(this.onDestroy$));\n  isFiltered$ = this.isFiltered.asObservable().pipe(distinctUntilChanged(), takeUntil(this.onDestroy$));\n  isItemFiltered = false;\n  isItemDisabled = false;\n\n  constructor(\n    private router: Router,\n    public roleService: RoleService,\n    private searchService: SearchService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.routerItemActiveSubscription();\n    this.emitItemActive();\n    this.menuSearchSubscription();\n    this.disabledItemSubscription();\n  }\n\n  ngOnDestroy(): void {\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n\n  onNodeActive(event: boolean): void {\n    this.isActive.next(event);\n  }\n\n  onNodeFiltered(event: boolean): void {\n    this.isItemFiltered = event;\n    this.isFiltered.next(event);\n  }\n\n  private routerItemActiveSubscription(): void {\n    this.router.events\n      .pipe(\n        filter((e: RouterEvent): e is NavigationEnd => e instanceof NavigationEnd),\n        takeUntil(this.onDestroy$)\n      )\n      .subscribe((e) => {\n        this.emitItemActive();\n      });\n  }\n\n  private menuSearchSubscription(): void {\n    if (!this.menuItem.children) {\n      this.searchService.search$.pipe(takeUntil(this.onDestroy$)).subscribe((search) => {\n        this.isItemFiltered = this.searchService.filter(search, this.menuItem.label || this.menuItem.header);\n        this.isFiltered.next(this.isItemFiltered);\n        this.changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  private disabledItemSubscription(): void {\n    this.roleService\n      .disableItem$(this.menuItem.roles)\n      .pipe(takeUntil(this.onDestroy$))\n      .subscribe((disabled) => (this.isItemDisabled = disabled));\n  }\n\n  private emitItemActive(): void {\n    if (this.menuItem.route) {\n      this.isActive.next(this.isActiveRoute(this.menuItem.route));\n    }\n  }\n\n  private isActiveRoute(route: string): boolean {\n    return this.router.isActive(route, this.isItemLinkExact());\n  }\n\n  private isItemLinkExact(): boolean {\n    return this.menuItem.linkActiveExact === undefined ? true : this.menuItem.linkActiveExact;\n  }\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  HostBinding,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\n\nimport { combineLatest, Subject } from 'rxjs';\nimport { filter, takeUntil } from 'rxjs/operators';\n\nimport { MenuItem } from '../sidebar-menu.interface';\n\nimport { NodeService } from './node.service';\nimport { RoleService } from './role.service';\nimport { openCloseAnimation } from './node.animations';\nimport { ItemComponent } from './item.component';\nimport { trackByItem } from './utils';\n\n@Component({\n  selector: 'asm-menu-node',\n  animations: [openCloseAnimation],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `<ul [@openClose]=\"isOpen\">\n    <li *ngIf=\"level === 0\" class=\"asm-menu-item\">\n      <span class=\"asm-menu-node__label\">{{ menuItem.label }}</span>\n    </li>\n    <ng-container *ngFor=\"let childItem of menuItem.children; trackBy: trackByItem\">\n      <li\n        asm-menu-item\n        class=\"asm-menu-item\"\n        *ngIf=\"roleService.showItem$(childItem.roles) | async\"\n        [menuItem]=\"childItem\"\n        [level]=\"level + 1\"\n        [disable]=\"disable\"\n      ></li>\n    </ng-container>\n  </ul>`,\n})\nexport class NodeComponent implements AfterViewInit, OnDestroy {\n  @Input() menuItem!: MenuItem;\n  @Input() level!: number;\n  @Input() disable = false;\n\n  @Output() isActive = new EventEmitter<boolean>();\n  @Output() isFiltered = new EventEmitter<boolean>();\n\n  @HostBinding('class.asm-menu-node--open') get open(): boolean {\n    return this.isOpen;\n  }\n\n  @ViewChildren(ItemComponent) private menuItemComponents!: QueryList<ItemComponent>;\n\n  isOpen = false;\n  isActiveChild = false;\n  trackByItem = trackByItem;\n\n  private onDestroy$ = new Subject();\n\n  constructor(\n    public nodeService: NodeService,\n    public roleService: RoleService,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngAfterViewInit(): void {\n    this.openedNodeSubscription();\n    this.activeItemsSubscription();\n    this.filterItemsSubscription();\n  }\n\n  ngOnDestroy(): void {\n    this.onDestroy$.next();\n    this.onDestroy$.complete();\n  }\n\n  onNodeToggleClick(): void {\n    this.isOpen = !this.isOpen;\n    this.nodeService.openedNode.next({ nodeComponent: this, nodeLevel: this.level });\n    this.changeDetectorRef.markForCheck();\n  }\n\n  private activeItemsSubscription(): void {\n    const isChildrenItemsActive = this.menuItemComponents.map((item) => item.isActive$);\n\n    if (isChildrenItemsActive && isChildrenItemsActive.length) {\n      combineLatest(isChildrenItemsActive)\n        .pipe(takeUntil(this.onDestroy$))\n        .subscribe((itemsActiveState) => {\n          this.isOpen = this.isActiveChild = itemsActiveState.includes(true);\n          this.isActive.emit(this.isOpen);\n        });\n    }\n  }\n\n  private filterItemsSubscription(): void {\n    const isChildrenItemsFiltered = this.menuItemComponents.map((item) => item.isFiltered$);\n\n    if (isChildrenItemsFiltered && isChildrenItemsFiltered.length) {\n      combineLatest(isChildrenItemsFiltered)\n        .pipe(takeUntil(this.onDestroy$))\n        .subscribe((itemsFilteredState) => {\n          const isItemsFiltered = itemsFilteredState.includes(false) === false;\n          this.isFiltered.emit(isItemsFiltered);\n        });\n    }\n  }\n\n  private openedNodeSubscription(): void {\n    this.nodeService.openedNode\n      .pipe(\n        filter(() => !!this.isOpen),\n        filter((node) => node.nodeComponent !== this),\n        takeUntil(this.onDestroy$)\n      )\n      .subscribe((node) => {\n        if (node.nodeLevel <= this.level) {\n          this.isOpen = false;\n          this.changeDetectorRef.markForCheck();\n        }\n      });\n  }\n}\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy, HostBinding, ViewChild } from '@angular/core';\nimport { RouterLinkActive } from '@angular/router';\n\nimport { MenuItem } from '../sidebar-menu.interface';\n\nimport { AnchorService } from './anchor.service';\n\n@Component({\n  selector: 'asm-menu-anchor',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `<ng-container [ngSwitch]=\"true\">\n      <a *ngSwitchCase=\"!!menuItem.children\" (click)=\"clickAnchor.emit()\">\n        <ng-container *ngTemplateOutlet=\"innerItem\"></ng-container>\n      </a>\n      <a\n        *ngSwitchCase=\"!!menuItem.route || menuItem.route === ''\"\n        [routerLink]=\"disable ? undefined : menuItem.route\"\n        routerLinkActive\n        #rla=\"routerLinkActive\"\n        [routerLinkActiveOptions]=\"{ exact: menuItem.linkActiveExact === undefined ? true : menuItem.linkActiveExact }\"\n      >\n        <ng-container *ngTemplateOutlet=\"innerItem\"></ng-container>\n      </a>\n      <a *ngSwitchCase=\"!!menuItem.url\" [href]=\"menuItem.url\" [target]=\"menuItem.target\">\n        <ng-container *ngTemplateOutlet=\"innerItem\"></ng-container>\n      </a>\n    </ng-container>\n\n    <ng-template #innerItem>\n      <i\n        *ngIf=\"menuItem.iconClasses || anchorService.iconClasses\"\n        [class]=\"menuItem.iconClasses || anchorService.iconClasses\"\n        class=\"asm-menu-anchor__icon\"\n      ></i>\n      <span class=\"asm-menu-anchor__label\">{{ menuItem.label }}</span>\n      <span\n        *ngIf=\"menuItem.badges || menuItem.children\"\n        class=\"asm-menu-anchor__pull\"\n        [ngClass]=\"{ 'asm-badges': menuItem.badges, 'asm-toggle': menuItem.children }\"\n      >\n        <span *ngFor=\"let badge of menuItem.badges\" [class]=\"badge.classes\" class=\"asm-badges__badge\">{{\n          badge.label\n        }}</span>\n        <span class=\"asm-toggle__icon\"><ng-content select=\"[toggleIcon]\"></ng-content></span>\n      </span>\n    </ng-template>`,\n})\nexport class AnchorComponent {\n  @Input() menuItem!: MenuItem;\n  @Input() isActive?: boolean;\n  @Input() disable = false;\n\n  @Output() clickAnchor = new EventEmitter<void>();\n\n  @HostBinding('class.asm-menu-anchor--active') get active(): boolean {\n    return this.isActive || (!!this.routerLinActive?.isActive && !this.disable);\n  }\n\n  @ViewChild('rla') private routerLinActive?: RouterLinkActive;\n\n  constructor(public anchorService: AnchorService) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { SidebarMenuComponent } from './sidebar-menu.component';\n\nimport { ItemComponent } from './internal/item.component';\nimport { NodeComponent } from './internal/node.component';\nimport { AnchorComponent } from './internal/anchor.component';\n\n@NgModule({\n  declarations: [SidebarMenuComponent, ItemComponent, NodeComponent, AnchorComponent],\n  imports: [RouterModule, CommonModule],\n  exports: [SidebarMenuComponent],\n})\nexport class SidebarMenuModule {}\n"]}